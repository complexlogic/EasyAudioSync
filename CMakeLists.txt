cmake_minimum_required(VERSION 3.13)
option(VCPKG "Build dependencies with vcpkg" OFF)
if (VCPKG)
  include("${CMAKE_SOURCE_DIR}/cmake/vcpkg.cmake")
endif ()

project("Easy Audio Sync"
  VERSION 0.9
  DESCRIPTION "Audio library syncing and conversion utility"
  HOMEPAGE_URL "https://github.com/complexlogic/EasyAudioSync"
  LANGUAGES CXX
)
set(CMAKE_CXX_STANDARD 20)
set(EXECUTABLE_NAME "easyaudiosync")
set(RDNS_NAME "io.github.complexlogic.EasyAudioSync")
include_directories(${PROJECT_BINARY_DIR})
add_compile_definitions("$<$<CONFIG:DEBUG>:DEBUG>")
set(EXECUTABLE_OUTPUT_PATH "${PROJECT_BINARY_DIR}")

# Configure options
if (WIN32 OR APPLE)
  set(QT_VERSION "6")
else ()
  set(QT_VERSION "5" CACHE STRING "Qt major version to use (5 or 6).")
  if (NOT (QT_VERSION STREQUAL "5" OR QT_VERSION STREQUAL "6"))
    message(FATAL_ERROR "Unsupported Qt version '${QT_VERSION}'. Only 5 and 6 are supported")
  endif ()
endif ()
if (UNIX)
  option(STRIP_BINARY "Run strip on the binary" OFF)
endif ()
option(PERSIST_GEOMETRY "Make window size and position persistent between runs" ON)
if (PERSIST_GEOMETRY)
  add_compile_definitions(PERSIST_GEOMETRY)
endif ()
option(FFDEBUG "FFmpeg debug messages" OFF)
if (FFDEBUG)
  add_compile_definitions("FFDEBUG")
endif ()
option(EXTRA_WARNINGS "Enable extra compiler warnings" OFF)
if (EXTRA_WARNINGS)
  if (MSVC)
    add_compile_options(/W4 /WX)
  else ()
    add_compile_options(-Wall -Wextra -Wpedantic -Wconversion)
  endif ()
endif ()
if (WIN32)
  option(NSIS_INSTALLER "Enable NSIS installer target" OFF)
endif ()

# Qt setup
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
if (QT_VERSION STREQUAL "5")
  set(QT_VERSION_REQUIREMENT "5.15...<6")
endif ()
find_package(Qt${QT_VERSION} ${QT_VERSION_REQUIREMENT} REQUIRED COMPONENTS Core Gui Widgets LinguistTools)

if (UNIX)
  find_package(PkgConfig MODULE REQUIRED)
  find_package(Threads REQUIRED)
  pkg_check_modules(LIBAVFORMAT REQUIRED IMPORTED_TARGET libavformat>=59.27)
  pkg_check_modules(LIBAVCODEC REQUIRED IMPORTED_TARGET libavcodec>=59.37)
  pkg_check_modules(LIBSWRESAMPLE REQUIRED IMPORTED_TARGET libswresample>=4.7)
  pkg_check_modules(LIBAVFILTER REQUIRED IMPORTED_TARGET libavfilter>=8.44)
  pkg_check_modules(LIBAVUTIL REQUIRED IMPORTED_TARGET libavutil>=57.28)
  pkg_check_modules(FMT REQUIRED IMPORTED_TARGET fmt)
  pkg_check_modules(SPDLOG REQUIRED IMPORTED_TARGET spdlog)
  pkg_check_modules(TAGLIB REQUIRED IMPORTED_TARGET taglib>=1.12)
  if (STRIP_BINARY)
    find_program(STRIP strip REQUIRED)
  endif ()
elseif (WIN32)
  find_path(FFMPEG_INCLUDE_DIR "libavformat/avformat.h" REQUIRED)
  find_library(LIBAVFORMAT avformat REQUIRED)
  find_library(LIBAVCODEC avcodec REQUIRED)
  find_library(LIBAVFILTER avfilter REQUIRED)
  find_library(LIBSWRESAMPLE swresample REQUIRED)
  find_library(LIBAVUTIL avutil REQUIRED)
  find_path(TAGLIB_INCLUDE_DIR "taglib/taglib.h" REQUIRED)
  find_library(TAGLIB tag REQUIRED)
  find_package(spdlog CONFIG REQUIRED)
  find_program(WINDEPLOYQT windeployqt.exe REQUIRED)
  if (NSIS_INSTALLER)
    find_program(NSIS makensis.exe REQUIRED)
  endif ()
endif ()

# Generate Windows application manifest and resource file
if (WIN32)
  set(VERSION_M ${PROJECT_VERSION_MAJOR})
  set(VERSION_N ${PROJECT_VERSION_MINOR})
  if (PROJECT_VERSION_PATCH)
    set(VERSION_O ${PROJECT_VERSION_PATCH})
  else ()
    set(VERSION_O 0)
  endif()
  if (PROJECT_VERSION_TWEAK)
    set(VERSION_P ${PROJECT_VERSION_TWEAK})
  else ()
    set(VERSION_P 0)
  endif()
  configure_file(${PROJECT_SOURCE_DIR}/config/${EXECUTABLE_NAME}.manifest.in ${PROJECT_BINARY_DIR}/${EXECUTABLE_NAME}.manifest)
endif()

# Linux desktop and appstream
if (UNIX AND NOT APPLE)
  configure_file("${PROJECT_SOURCE_DIR}/config/${EXECUTABLE_NAME}.desktop.in" "${PROJECT_BINARY_DIR}/${RDNS_NAME}.desktop")
  configure_file("${PROJECT_SOURCE_DIR}/config/metainfo.xml.in" "${PROJECT_BINARY_DIR}/${RDNS_NAME}.metainfo.xml")
endif ()

add_subdirectory(src)
configure_file("${PROJECT_SOURCE_DIR}/config/easync.hpp.in" "${PROJECT_BINARY_DIR}/easync.hpp")

if (UNIX)
  configure_file(
      "${PROJECT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
      "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake"
      IMMEDIATE @ONLY)
  add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P ${PROJECT_BINARY_DIR}/cmake_uninstall.cmake)
endif ()
